#!/bin/bash
#
# Copyright (c) 2010 Jeffrey F. Springman <jspringman@unicusconcepts.com> 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ---------------------------------------------------------------------
#
# cloudcity 1.04 - 01-21-2010 - Added the ability to restore files to their original locations.
# cloudcity 1.03 - 11-17-2009 - Added the RACKSPACE_SERVICENET environmental variable for 
#                               unmetered transfers over the local network for those using the
#                               DFW1 data center.
# cloudcity 1.02 - 08-26-2009 - Removed the full path requirement for restores. Relative paths
#                               may now be used.
# cloudcity 1.01 - 07-30-2009 - Improved the restore function by preserving the name of the file
#                               or directory being restored.
# cloudcity 1.00 - 07-01-2009
#
# Note: This program makes backing up your system to Cloud Files via Duplicity a bit easier.
# Execute it with the --help option for usage information. The following software is required:
# python-cloudfiles-1.6.0 (http://github.com/rackspace/python-cloudfiles)
# duplicity-0.5.18 (http://savannah.nongnu.org/download/duplicity/duplicity-0.5.18.tar.gz)
# This program has not been tested with other versions of the above software.

# Cloud Files information 
export CLOUDFILES_USERNAME=your_username 
export CLOUDFILES_APIKEY=your_api_key

# GPG passphrase (long and difficult is good) 
export PASSPHRASE=your_gpg_passphrase

# Cloud Files API location (must have trailing slash)
API_LOCATION="/usr/lib/python2.5/site-packages/cloudfiles/"

# The root of the backup
ROOT="/"

# Uncomment to use the local network for unmetered transfers to and from Cloud Files.
# Your server or VPS must be located in the DFW1 data center for this to work.
#export RACKSPACE_SERVICENET=true

# Backup target
TARGET="cf+http://`hostname`"
 
# Restore target
RESTORE="/tmp/restores"
 
# List of directories to include
INCLUDE_LIST=("/bin" "/etc" "/home" "/opt" "/root" "/sbin" "/usr" "/var")
 
# List of directories to exclude
EXCLUDE_LIST=("$RESTORE")
 
# Full backup schedule
FULL_IF_OLDER_THAN="30D"

# Removal schedule
CLEANUP_TYPE="remove-older-than"
CLEANUP_VARIABLE="90D"
 
# Number of full backups to keep (alternative to above schedule)
# CLEANUP_TYPE="remove-all-but-n-full"
# CLEANUP_VARIABLE="3"
 
# Log settings (LOG_DIR must have trailing slash)
LOG_DIR="/var/log/"
LOG_FILE="duplicity.log"

# Email addresses (email will not be sent if EMAIL_TO is left blank)
EMAIL_TO=""
EMAIL_FROM="Backup Agent <root@`hostname`>"
 
LOGFILE="$LOG_DIR$LOG_FILE"
DUPLICITY=`which duplicity`

### Do not edit below this line. ###

PROGRAM=`basename $0`
TIME=`date +%Y%m%d%H%M%S`

for include in ${INCLUDE_LIST[@]}; do
  INCLUDE="$INCLUDE --include=$include"
done

for exclude in ${EXCLUDE_LIST[@]}; do
  EXCLUDE="$EXCLUDE --exclude=$exclude"
done

function help {
  echo -e "Usage:\n  $PROGRAM [OPTIONS] [FILE]"
  echo -e "Options:\n  -a AGE  Specifies the age (in days) of the archived file or directory to be restored."
  echo -e "  -m      Automatically moves restored items to their original locations from the restore directory."
  echo -e "  -h      Displays this helpful information."
  echo -e "  -l      Lists all the files currently stored in the backup repository."
  echo -e "  -s      Displays the status of the backup chains and sets in the backup repository."
  echo -e "Examples:\n  $PROGRAM\n    Performs an incremental or full backup, depending on whether or not the latter is due." 
  echo -e "  $PROGRAM /home/foo/\n    Restores the /home/foo directory."
  echo -e "  $PROGRAM -ma 2 /home/foo/bar.rb\n    Restores bar.rb as it existed two days ago and moves it from the restore directory to /home/foo/."
}

function finish {
  unset CLOUDFILES_USERNAME 
  unset CLOUDFILES_APIKEY 
  unset PASSPHRASE
  unset RACKSPACE_SERVICENET
  exit
}

if [ ! $1 ]; then
  if [ ! -d $LOG_DIR ]; then
    if ! mkdir -p $LOG_DIR; then
      echo "Log directory $LOG_DIR could not be created by this user: $USER"
      finish 
    fi
  elif [ ! -w $LOG_DIR ]; then
    echo "Log directory $LOG_DIR is not writeable by this user: $USER"
    finish
  fi
  echo "Cleaning up..."
  $DUPLICITY cleanup --force $TARGET > $LOGFILE
  $DUPLICITY $CLEANUP_TYPE $CLEANUP_VARIABLE --force $TARGET | grep -v 'Last full backup' >> $LOGFILE
  options="$EXCLUDE $INCLUDE --full-if-older-than $FULL_IF_OLDER_THAN --exclude=**"
  echo "Performing backup. Please wait..."
  $DUPLICITY $ACTION $options $ROOT $TARGET | grep -v 'Last full backup' >> $LOGFILE
  $DUPLICITY collection-status $TARGET >> $LOGFILE
  if [ $EMAIL_TO ]; then
    cat $LOGFILE | mail -s "Backup Status: `hostname`" -a "From: $EMAIL_FROM" $EMAIL_TO
  fi
  echo "Backup completed."
  finish
else
  while getopts 'lshma:' OPTION; do
    case $OPTION in
      l) $DUPLICITY list-current-files $FILE $TARGET
         finish;;
      s) $DUPLICITY collection-status $TARGET
         finish;;
      a) age="${OPTARG}D";;
      m) move=1;;
      h | ?) help
         finish;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -gt 1 ]; then
    echo "You may only restore one file or directory at a time."
    finish
  fi
  file=$*
  if [ ! -d $RESTORE/restore_$TIME ]; then
    if ! mkdir -p $RESTORE/restore_$TIME; then
      echo "Restore directory $RESTORE/restore_$TIME could not be created by this user: $USER"
      finish
    fi
  elif [ ! -w ${RESTORE}/restore_${TIME} ]; then
    echo "Restore directory $RESTORE/restore_$TIME is not writeable by this user: $USER"
    finish
  fi
  if [ ! $age ]; then
    age="0D"
  fi
  if [ ${file:0:1} == "/" ]; then
    file=${file:1}
  else
    if [ `pwd` != "/" ]; then
      dir=`pwd`"/"
      dir=${dir:1}
    fi
    file=$dir$file
  fi
  if [ ${file:$(( ${#file} - 1 )):1} == "/" ]; then
    file=${file:0:$(( ${#file} - 1 ))}
  fi
  a=`echo $file | rev`
  a=${a:0:`expr index ${a} / - 1`}
  filename=`echo ${a} | rev`
  if [ $move ]; then
    restore_target="/$file"
    message="File(s) restored to /$file."
  else
    restore_target="$RESTORE/restore_$TIME/$filename"
    message="File(s) restored to $restore_target."
  fi
  echo "Performing restore. Please wait..."
  if $DUPLICITY --force -v 0 -t $age --file-to-restore $file $TARGET $restore_target; then
    echo $message
  fi
fi
finish